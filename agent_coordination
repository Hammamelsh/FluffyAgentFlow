"""Production-grade coordination system with comprehensive monitoring and control."""

from dataclasses import dataclass, field
from typing import Dict, Set, Optional, List, Any, Union, Callable
import asyncio
import time
import contextlib
from enum import Enum, auto
import threading
import weakref
import logging
from datetime import datetime, timedelta
import uuid


class RateLimitStrategy(Enum):
    """Rate limiting strategies"""
    TOKEN_BUCKET = auto()
    LEAKY_BUCKET = auto()
    FIXED_WINDOW = auto()
    SLIDING_WINDOW = auto()


class PrimitiveType(Enum):
    """Coordination primitive types"""
    MUTEX = auto()  # Exclusive access
    SEMAPHORE = auto()  # Limited concurrent access
    BARRIER = auto()  # Synchronization point
    LEASE = auto()  # Time-based exclusive access
    LOCK = auto()  # Simple lock
    QUOTA = auto()  # Resource quota management


class ResourceState(Enum):
    """Resource states"""
    AVAILABLE = "available"
    ACQUIRED = "acquired"
    LOCKED = "locked"
    EXPIRED = "expired"
    ERROR = "error"


@dataclass
class RateLimiter:
    """Advanced rate limiter with multiple strategies"""
    max_rate: float
    burst_size: int = 1
    strategy: RateLimitStrategy = RateLimitStrategy.TOKEN_BUCKET
    window_size: float = 1.0  # For windowed strategies

    _tokens: float = field(init=False)
    _last_update: float = field(init=False)
    _window_requests: Dict[float, int] = field(default_factory=dict)
    _lock: asyncio.Lock = field(default_factory=asyncio.Lock)

    def __post_init__(self):
        self._tokens = self.burst_size
        self._last_update = time.time()

    async def acquire(self) -> bool:
        """Attempt to acquire rate limit token"""
        async with self._lock:
            now = time.time()

            if self.strategy == RateLimitStrategy.TOKEN_BUCKET:
                time_passed = now - self._last_update
                self._tokens = min(
                    self.burst_size,
                    self._tokens + time_passed * self.max_rate
                )

                if self._tokens >= 1:
                    self._tokens -= 1
                    self._last_update = now
                    return True

            elif self.strategy == RateLimitStrategy.LEAKY_BUCKET:
                # Clean old requests
                cutoff = now - self.window_size
                self._window_requests = {
                    ts: count for ts, count in self._window_requests.items()
                    if ts > cutoff
                }

                # Check rate
                total_requests = sum(self._window_requests.values())
                if total_requests < self.max_rate:
                    self._window_requests[now] = 1
                    return True

            elif self.strategy in (RateLimitStrategy.FIXED_WINDOW,
                                   RateLimitStrategy.SLIDING_WINDOW):
                window_start = int(now / self.window_size) * self.window_size
                if self.strategy == RateLimitStrategy.SLIDING_WINDOW:
                    window_start = now - self.window_size

                # Count requests in window
                requests = sum(
                    count for ts, count in self._window_requests.items()
                    if ts >= window_start
                )

                if requests < self.max_rate:
                    self._window_requests[now] = 1
                    return True

            return False


@dataclass
class CoordinationPrimitive:
    """Enhanced coordination primitive"""
    name: str
    type: PrimitiveType
    ttl: float = 30.0
    max_count: int = 1
    wait_timeout: Optional[float] = None
    quota_limit: Optional[float] = None

    # Internal state
    _lock: asyncio.Lock = field(default_factory=asyncio.Lock)
    _condition: asyncio.Condition = field(default_factory=asyncio.Condition)
    _owners: Set[str] = field(default_factory=set)
    _acquired_times: Dict[str, float] = field(default_factory=dict)
    _quota_usage: Dict[str, float] = field(default_factory=dict)
    _wait_count: int = 0
    _state: ResourceState = field(default=ResourceState.AVAILABLE)
    _last_error: Optional[str] = None

    async def acquire(
            self,
            caller_id: str,
            timeout: Optional[float] = None,
            quota_amount: Optional[float] = None
    ) -> bool:
        """Acquire the primitive"""
        try:
            async with self._lock:
                # Handle quota type specially
                if self.type == PrimitiveType.QUOTA:
                    if quota_amount is None:
                        raise ValueError("Quota amount required")
                    current_usage = sum(self._quota_usage.values())
                    if current_usage + quota_amount <= (self.quota_limit or 0):
                        self._quota_usage[caller_id] = quota_amount
                        return True
                    return False

                # Check existing ownership
                if caller_id in self._owners:
                    self._acquired_times[caller_id] = time.time()
                    return True

                # Handle different primitive types
                if self.type == PrimitiveType.MUTEX:
                    if not self._owners:
                        self._acquire_for(caller_id)
                        return True

                elif self.type == PrimitiveType.SEMAPHORE:
                    if len(self._owners) < self.max_count:
                        self._acquire_for(caller_id)
                        return True

                elif self.type == PrimitiveType.BARRIER:
                    self._acquire_for(caller_id)
                    if len(self._owners) >= self.max_count:
                        async with self._condition:
                            self._condition.notify_all()
                        return True
                    else:
                        self._wait_count += 1
                        try:
                            async with self._condition:
                                await asyncio.wait_for(
                                    self._condition.wait(),
                                    timeout=timeout or self.wait_timeout
                                )
                            return True
                        except asyncio.TimeoutError:
                            self._remove_owner(caller_id)
                            return False
                        finally:
                            self._wait_count -= 1

                elif self.type == PrimitiveType.LEASE:
                    self._cleanup_expired()
                    if not self._owners:
                        self._acquire_for(caller_id)
                        return True

                return False

        except Exception as e:
            self._state = ResourceState.ERROR
            self._last_error = str(e)
            raise

    def _acquire_for(self, caller_id: str):
        """Internal acquisition helper"""
        self._owners.add(caller_id)
        self._acquired_times[caller_id] = time.time()
        self._state = ResourceState.ACQUIRED

    def _remove_owner(self, caller_id: str):
        """Internal removal helper"""
        self._owners.discard(caller_id)
        self._acquired_times.pop(caller_id, None)
        self._quota_usage.pop(caller_id, None)
        if not self._owners:
            self._state = ResourceState.AVAILABLE

    def _cleanup_expired(self):
        """Clean up expired acquisitions"""
        now = time.time()
        expired = [
            owner for owner, acquired in self._acquired_times.items()
            if now - acquired > self.ttl
        ]
        for owner in expired:
            self._remove_owner(owner)

    async def release(self, caller_id: str) -> bool:
        """Release the primitive"""
        async with self._lock:
            if caller_id in self._owners:
                self._remove_owner(caller_id)

                if self.type == PrimitiveType.BARRIER and self._wait_count > 0:
                    async with self._condition:
                        self._condition.notify_all()

                return True
            return False

    def get_state(self) -> Dict[str, Any]:
        """Get current state information"""
        return {
            "state": self._state.value,
            "owners": list(self._owners),
            "wait_count": self._wait_count,
            "quota_usage": dict(self._quota_usage),
            "last_error": self._last_error,
            "ttl_remaining": min(
                (self.ttl - (time.time() - acquired))
                for acquired in self._acquired_times.values()
            ) if self._acquired_times else None
        }


class DeadlockDetector:
    """Enhanced deadlock detection and resolution"""

    def __init__(
            self,
            agent: Any,
            detection_interval: float = 1.0,
            max_cycles: int = 100
    ):
        self.agent = weakref.proxy(agent)
        self.detection_interval = detection_interval
        self.max_cycles = max_cycles
        self._dependency_graph: Dict[str, Set[str]] = {}
        self._lock = asyncio.Lock()
        self._detection_task: Optional[asyncio.Task] = None
        self._cycle_count = 0
        self._last_cycle: Optional[List[str]] = None

    async def start(self):
        """Start deadlock detection"""
        if not self._detection_task:
            self._detection_task = asyncio.create_task(self._detect_deadlocks())
            if hasattr(self.agent, '_monitor'):
                self.agent._monitor.logger.info("deadlock_detection_started")

    async def stop(self):
        """Stop deadlock detection"""
        if self._detection_task:
            self._detection_task.cancel()
            await asyncio.shield(self._detection_task)
            self._detection_task = None
            if hasattr(self.agent, '_monitor'):
                self.agent._monitor.logger.info("deadlock_detection_stopped")

    def get_status(self) -> Dict[str, Any]:
        """Get detector status"""
        return {
            "cycle_count": self._cycle_count,
            "last_cycle": self._last_cycle,
            "active": bool(self._detection_task),
            "graph_size": len(self._dependency_graph)
        }


class AgentCoordinator:
    """Enhanced agent coordination system"""

    def __init__(
            self,
            agent: Any,
            detection_interval: float = 1.0,
            cleanup_interval: float = 60.0
    ):
        self.agent = weakref.proxy(agent)
        self.instance_id = str(uuid.uuid4())

        # Components
        self.rate_limiters: Dict[str, RateLimiter] = {}
        self.primitives: Dict[str, CoordinationPrimitive] = {}
        self.deadlock_detector = DeadlockDetector(
            agent,
            detection_interval=detection_interval
        )

        # State
        self._cleanup_task: Optional[asyncio.Task] = None
        self._cleanup_interval = cleanup_interval
        self._shutting_down = False

    async def start(self):
        """Start coordination system"""
        await self.deadlock_detector.start()
        self._cleanup_task = asyncio.create_task(self._cleanup_loop())

    async def stop(self):
        """Stop coordination system"""
        self._shutting_down = True
        await self.deadlock_detector.stop()
        if self._cleanup_task:
            self._cleanup_task.cancel()
            await asyncio.shield(self._cleanup_task)

    def add_rate_limiter(
            self,
            name: str,
            max_rate: float,
            strategy: RateLimitStrategy = RateLimitStrategy.TOKEN_BUCKET,
            **kwargs
    ):
        """Add a rate limiter"""
        self.rate_limiters[name] = RateLimiter(
            max_rate=max_rate,
            strategy=strategy,
            **kwargs
        )

    def create_primitive(
            self,
            name: str,
            type: PrimitiveType,
            **kwargs
    ):
        """Create a coordination primitive"""
        self.primitives[name] = CoordinationPrimitive(
            name=name,
            type=type,
            **kwargs
        )

    async def coordinate_state_execution(
            self,
            state_name: str,
            timeout: Optional[float] = None
    ) -> bool:
        """Coordinate state execution"""
        try:
            # Check rate limits
            if state_name in self.rate_limiters:
                if not await self.rate_limiters[state_name].acquire():
                    if hasattr(self.agent, '_monitor'):
                        self.agent._monitor.logger.warning(
                            "rate_limit_exceeded",
                            state=state_name
                        )
                    return False

            # Check primitives
            for primitive in self.primitives.values():
                if not await primitive.acquire(
                        f"{self.instance_id}:{state_name}",
                        timeout=timeout
                ):
                    return False

            return True

        except Exception as e:
            if hasattr(self.agent, '_monitor'):
                self.agent._monitor.logger.error(
                    "coordination_error",
                    state=state_name,
                    error=str(e)
                )
            return False

    async def release_coordination(self, state_name: str):
        """Release coordination resources"""
        for primitive in self.primitives.values():
            await primitive.release(f"{self.instance_id}:{state_name}")

    def get_status(self) -> Dict[str, Any]:
        """Get coordinator status"""
        return {
            "instance_id": self.instance_id,
            "primitives": {
                name: prim.get_state()
                for name, prim in self.primitives.items()
            },
            "deadlock_detector": self.deadlock_detector.get_status(),
            "shutting_down": self._shutting_down
        }

    async def _cleanup_loop(self):
        """Cleanup loop for maintenance"""
        while not self._shutting_down:
            try:
                for primitive in self.primitives.values():
                    async with primitive._lock:
                        primitive._cleanup_expired()

                await asyncio.sleep(self._cleanup_interval)

            except asyncio.CancelledError:
                break
            except Exception as e:
                if hasattr(self.agent, '_monitor'):
                    self.agent._monitor.logger.error(
                        "cleanup_error",
                        error=str(e)
                    )


def enhance_agent(agent: Any) -> Any:
    """Add production coordination to an agent"""

    # Add coordinator
    coordinator = AgentCoordinator(agent)
    agent._coordinator = coordinator

    # Start coordinator
    async def start_coordinator():
        await coordinator.start()

    if hasattr(agent, '_startup_tasks'):
        agent._startup_tasks.append(start_coordinator())
    else:
        asyncio.create_task(start_coordinator())

    # Enhance run_state
    original_run_state = agent.run_state

    async def enhanced_run_state(self, state_name: str) -> None:
        """Enhanced state execution with coordination"""
        # Track attempt
        attempt_id = str(uuid.uuid4())
        start_time = time.time()

        try:
            # Check coordination and rate limits
            if not await self._coordinator.coordinate_state_execution(state_name):
                if hasattr(self, '_monitor'):
                    self._monitor.logger.warning(
                        "coordination_failed",
                        state=state_name,
                        attempt=attempt_id
                    )
                # Requeue with backoff
                self._add_to_queue(
                    state_name,
                    self.state_metadata[state_name],
                    priority_boost=-1
                )
                return

            # Execute original state with monitoring
            if hasattr(self, '_monitor'):
                self._monitor.logger.info(
                    "state_execution_started",
                    state=state_name,
                    attempt=attempt_id,
                    metadata={
                        "resources": asdict(self.state_metadata[state_name].resources),
                        "dependencies": len(self.state_metadata[state_name].dependencies),
                        "attempts": self.state_metadata[state_name].attempts
                    }
                )

            async with self._execution_span(state_name, attempt_id):
                await original_run_state(state_name)

            # Record success metrics
            if hasattr(self, '_monitor'):
                duration = time.time() - start_time
                await self._monitor.record_metric(
                    'state_duration',
                    duration,
                    {'state': state_name, 'status': 'success'}
                )
                await self._monitor.record_metric(
                    'state_success',
                    1,
                    {'state': state_name}
                )

        except Exception as e:
            # Handle failure with monitoring
            if hasattr(self, '_monitor'):
                duration = time.time() - start_time
                self._monitor.logger.error(
                    "state_execution_failed",
                    state=state_name,
                    attempt=attempt_id,
                    error=str(e),
                    duration=duration
                )
                await self._monitor.record_metric(
                    'state_duration',
                    duration,
                    {'state': state_name, 'status': 'error'}
                )
                await self._monitor.record_metric(
                    'state_error',
                    1,
                    {'state': state_name, 'error_type': type(e).__name__}
                )
            raise

        finally:
            # Always release coordination
            await self._coordinator.release_coordination(state_name)

    @contextlib.asynccontextmanager
    async def _execution_span(self, state_name: str, attempt_id: str):
        """Create execution span for monitoring"""
        if hasattr(self, '_monitor'):
            async with self._monitor.monitor_operation(
                    "state_execution",
                    {
                        "state": state_name,
                        "attempt": attempt_id,
                        "agent": self.name
                    }
            ) as span:
                yield span
        else:
            yield None

    # Enhanced cleanup
    original_cleanup = getattr(agent, '_cleanup', None)

    async def enhanced_cleanup():
        """Enhanced cleanup with monitoring"""
        try:
            # Stop coordinator
            await agent._coordinator.stop()

            # Run original cleanup
            if original_cleanup:
                await original_cleanup()

        except Exception as e:
            if hasattr(agent, '_monitor'):
                agent._monitor.logger.error(
                    "cleanup_error",
                    error=str(e)
                )
            raise

    agent._cleanup = enhanced_cleanup

    # Add utility methods
    async def get_coordination_status(self) -> Dict[str, Any]:
        """Get coordination system status"""
        return await agent._coordinator.get_status()

    agent.get_coordination_status = get_coordination_status

    async def reset_coordination(self):
        """Reset coordination system"""
        await agent._coordinator.stop()
        agent._coordinator = AgentCoordinator(agent)
        await agent._coordinator.start()

    agent.reset_coordination = reset_coordination

    # Add rate limiting utility
    def add_state_rate_limit(
            self,
            state_name: str,
            max_rate: float,
            strategy: RateLimitStrategy = RateLimitStrategy.TOKEN_BUCKET,
            **kwargs
    ):
        """Add rate limit for specific state"""
        self._coordinator.add_rate_limiter(
            state_name,
            max_rate,
            strategy,
            **kwargs
        )

    agent.add_state_rate_limit = add_state_rate_limit

    # Add coordination primitive utility
    def add_state_coordination(
            self,
            state_name: str,
            primitive_type: PrimitiveType,
            **kwargs
    ):
        """Add coordination primitive for specific state"""
        self._coordinator.create_primitive(
            f"state_{state_name}",
            primitive_type,
            **kwargs
        )

    agent.add_state_coordination = add_state_coordination

    return agent


# Helper function for easy agent enhancement
def create_coordinated_agent(
        name: str,
        **agent_kwargs
) -> Any:
    """Create an agent with coordination enabled"""
    from .agent import Agent

    agent = Agent(name, **agent_kwargs)
    return enhance_agent(agent)
